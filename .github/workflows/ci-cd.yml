name: A3sist Extension CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '6.0.x'
  SOLUTION_PATH: './A3sist.sln'
  VSIX_PROJECT_PATH: './src/A3sist.UI/A3sist.UI.csproj'
  ARTIFACTS_PATH: './artifacts'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: windows-2022
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for GitVersion
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 🔧 Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64
        
    - name: 📦 Restore NuGet Packages
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: 🔨 Build Solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
    - name: 🧪 Run Unit Tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
      
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./TestResults/
        retention-days: 30
        
    - name: 📊 Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Tests
        path: './TestResults/*.trx'
        reporter: dotnet-trx
        
    - name: 🔍 Code Coverage Report
      uses: codecov/codecov-action@v4
      if: always()
      with:
        directory: ./TestResults/
        flags: unittests
        name: codecov-a3sist
        
  # Package Job
  package:
    runs-on: windows-2022
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 🔧 Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64
        
    - name: 🏷️ Generate Version Number
      id: version
      run: |
        if ("${{ github.ref }}" -match "refs/tags/v(.*)") {
          $version = $matches[1]
        } else {
          $version = "1.0.0-preview-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        }
        Write-Host "Version: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "VERSION=$version" >> $env:GITHUB_ENV
      shell: pwsh
      
    - name: 📦 Restore Packages
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: 🔨 Build for Packaging
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
    - name: 📦 Create VSIX Package
      run: |
        mkdir -p ${{ env.ARTIFACTS_PATH }}
        msbuild ${{ env.VSIX_PROJECT_PATH }} /p:Configuration=Release /p:Platform="Any CPU" /p:OutputPath="${{ env.ARTIFACTS_PATH }}" /t:CreateVsixContainer /verbosity:minimal
      shell: pwsh
      
    - name: 🏷️ Rename VSIX with Version
      run: |
        $vsixFiles = Get-ChildItem -Path "${{ env.ARTIFACTS_PATH }}" -Name "*.vsix"
        if ($vsixFiles) {
          $oldName = $vsixFiles[0]
          $newName = "A3sist-v${{ steps.version.outputs.version }}.vsix"
          Rename-Item -Path "${{ env.ARTIFACTS_PATH }}/$oldName" -NewName $newName
          Write-Host "Renamed VSIX: $oldName -> $newName"
          echo "VSIX_FILE=$newName" >> $env:GITHUB_ENV
        }
      shell: pwsh
      
    - name: ✅ Validate VSIX Package
      run: |
        $vsixPath = "${{ env.ARTIFACTS_PATH }}/${{ env.VSIX_FILE }}"
        if (Test-Path $vsixPath) {
          $size = (Get-Item $vsixPath).Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          Write-Host "✅ VSIX package created successfully: ${{ env.VSIX_FILE }} ($sizeMB MB)"
        } else {
          Write-Error "❌ VSIX package not found!"
          exit 1
        }
      shell: pwsh
      
    - name: 📤 Upload VSIX Artifact
      uses: actions/upload-artifact@v4
      with:
        name: vsix-package
        path: ${{ env.ARTIFACTS_PATH }}/${{ env.VSIX_FILE }}
        retention-days: 90
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          ${{ env.ARTIFACTS_PATH }}/**/*
          ./src/A3sist.UI/bin/Release/**/*
        retention-days: 30

  # Release Job (only on tags)
  release:
    runs-on: windows-2022
    needs: package
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download VSIX Package
      uses: actions/download-artifact@v4
      with:
        name: vsix-package
        path: ./release-artifacts/
        
    - name: 🏷️ Extract Version from Tag
      id: version
      run: |
        $version = "${{ github.ref }}" -replace "refs/tags/v", ""
        echo "version=$version" >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: 📋 Generate Release Notes
      id: release_notes
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $releaseNotes = @"
        ## 🚀 A3sist v$version Release
        
        ### What's New
        - 🤖 Intelligent AI-powered chat interface
        - 💡 Context-aware code analysis and suggestions
        - 🛠️ Multi-agent system with MCP integration
        - ⚙️ Comprehensive settings and customization
        - 🔧 Deep Visual Studio integration
        
        ### System Requirements
        - Visual Studio 2022 (17.9+)
        - .NET Framework 4.8+
        - .NET 6.0 Runtime
        - Windows 10/11 (x64)
        
        ### Installation
        1. Download the VSIX file below
        2. Double-click to install, or use Extensions → Manage Extensions in VS
        3. Restart Visual Studio
        4. Access via Tools → A3sist Chat (Ctrl+Shift+F8)
        
        ### Documentation
        - [Getting Started Guide](https://github.com/A3sist/A3sist/wiki/Getting-Started)
        - [Configuration Guide](https://github.com/A3sist/A3sist/wiki/Configuration)
        - [API Documentation](https://github.com/A3sist/A3sist/wiki/API)
        
        For full changelog, see [CHANGELOG.md](https://github.com/A3sist/A3sist/blob/main/CHANGELOG.md)
        "@
        
        $releaseNotes | Out-File -FilePath release_notes.md -Encoding UTF8
        echo "notes_file=release_notes.md" >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: "A3sist v${{ steps.version.outputs.version }}"
        body_path: ${{ steps.release_notes.outputs.notes_file }}
        files: ./release-artifacts/*.vsix
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'preview') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Marketplace Deployment (manual trigger for production)
  marketplace-deploy:
    runs-on: windows-2022
    needs: package
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment: marketplace-production
    
    steps:
    - name: 📥 Download VSIX Package
      uses: actions/download-artifact@v4
      with:
        name: vsix-package
        path: ./marketplace/
        
    - name: 🚀 Deploy to VS Marketplace
      run: |
        Write-Host "🚀 Deploying to Visual Studio Marketplace..."
        Write-Host "📦 Package ready for manual upload to:"
        Write-Host "   https://marketplace.visualstudio.com/manage"
        Write-Host ""
        Write-Host "📋 Deployment Checklist:"
        Write-Host "  ✅ VSIX package validated"
        Write-Host "  ✅ Tests passed"
        Write-Host "  ✅ Release notes prepared"
        Write-Host "  ⏳ Manual marketplace upload required"
        Write-Host ""
        Write-Host "📄 Upload the following file:"
        Get-ChildItem -Path "./marketplace/*.vsix" | ForEach-Object {
          Write-Host "   📦 $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
        }
      shell: pwsh
      
# Job Summary
  summary:
    runs-on: ubuntu-latest
    needs: [build-and-test, package]
    if: always()
    
    steps:
    - name: 📋 Pipeline Summary
      run: |
        echo "## 🏗️ A3sist Extension Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-and-test.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| Package | ${{ needs.package.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "- VSIX Package (for Visual Studio installation)" >> $GITHUB_STEP_SUMMARY
        echo "- Test Results and Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Build Logs and Diagnostics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "- 🎉 GitHub Release will be created automatically" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- 📤 Manual deployment to VS Marketplace (if approved)" >> $GITHUB_STEP_SUMMARY
        echo "- 📖 Update documentation and announcement" >> $GITHUB_STEP_SUMMARY